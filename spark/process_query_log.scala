import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import org.apache.spark.sql.SaveMode
import org.json4s._
import org.json4s.jackson.JsonMethods._
import com.fasterxml.jackson.core.JsonParseException
import java.net.URLEncoder

/********** UI Event **********/

// Schema for UI event
val request_schema = new StructType()
      .add("query", StringType)
      .add("sort", new StructType()
          .add("id", StringType)
          )
      .add("page", new StructType()
          .add("size", StringType)
          .add("current", StringType)
          )

// Schema for search result
val result_schema = new StructType()
      .add("meta", new StructType()
          .add("page", new StructType()
              .add("current", StringType)
              .add("total_pages", StringType)
              .add("total_results", StringType)
              .add("size", StringType)
          )
          .add("engine", new StructType()
              .add("name", StringType)
          )
          .add("request_id", StringType)
      )
      .add("results", new ArrayType(new StructType()
          .add("_meta", new StructType()
              .add("score", StringType)
          )
          .add("id", new StructType()
              .add("raw", StringType)
          )
          .add("index", new StructType()
              .add("snippet", StringType)
          )
          .add("name", new StructType()
              .add("snippet", StringType)
          )
          .add("availability_30", new StructType()
              .add("snippet", StringType)
          )
          .add("listing_url", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_rating", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_cleanliness", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_communication", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_checkin", new StructType()
              .add("snippet", StringType)
          )
          .add("availability_90", new StructType()
              .add("snippet", StringType)
          )
          .add("availability_365", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_accuracy", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_location", new StructType()
              .add("snippet", StringType)
          )
          .add("review_scores_value", new StructType()
              .add("snippet", StringType)
          )
          .add("availability_60", new StructType()
              .add("snippet", StringType)
          )
          .add("scrape_id", new StructType()
              .add("snippet", StringType)
          )
          .add("last_scraped", new StructType()
              .add("snippet", StringType)
          )
          .add("host_id", new StructType()
              .add("snippet", StringType)
          )
          .add("first_review", new StructType()
              .add("snippet", StringType)
          )
          .add("last_review", new StructType()
              .add("snippet", StringType)
          )
          .add("overall_rating", new StructType()
              .add("snippet", StringType)
          )
          .add("price", new StructType()
              .add("snippet", StringType)
          ), true)
      )

val df = spark.read.json("../log/airbnb-history-boston/*.json")

var search_logs = df.select(explode($"results").as("record")).filter(!$"record.full_request_path".contains("search.json")).select($"record.timestamp", $"record.request_body", $"record.response_body")

var rankedResults = search_logs.collect().map(x => {Seq(x.getString(2)).toDS.toDF.withColumn("data", from_json($"value", result_schema)).withColumn("timestamp", lit(x.getString(0))).withColumn("request", lit(x.getString(1))).select($"timestamp", $"request", $"data.meta.request_id".as("search_id"), $"data.meta.page.current".as("paginated_id"), $"data.meta.page.total_pages".as("total_pages"), $"data.meta.page.total_results".as("total_results"), $"data.meta.page.size".as("result_size"), posexplode($"data.results"), regexp_replace(substring_index($"request", "\",", 1), "\\{\"query\":\"", "").as("query"))})

var rankedResults_df = rankedResults.reduce(_ union _)

var impressions = rankedResults_df.select($"timestamp", $"query", $"search_id", $"paginated_id", $"total_pages", $"total_results", $"result_size", ($"pos"+1).as("position"), $"col._meta.score".as("score"), $"col.id.raw".as("doc_id"), $"col.index.snippet".as("index"), $"col.name.snippet".as("title"), $"col.availability_30.snippet".as("availability_30"), $"col.listing_url.snippet".as("listing_url"), $"col.review_scores_rating.snippet".as("review_scores_rating"), $"col.review_scores_cleanliness.snippet".as("review_scores_cleanliness"), $"col.review_scores_communication.snippet".as("review_scores_communication"), $"col.review_scores_checkin.snippet".as("review_scores_checkin"), $"col.availability_90.snippet".as("availability_90"), $"col.availability_365.snippet".as("availability_365"), $"col.review_scores_accuracy.snippet".as("review_scores_accuracy"), $"col.review_scores_location.snippet".as("review_scores_location"), $"col.review_scores_value.snippet".as("review_scores_value"), $"col.availability_60.snippet".as("availability_60"), $"col.scrape_id.snippet".as("scrape_id"), $"col.last_scraped.snippet".as("last_scraped"), $"col.host_id.snippet".as("host_id"), $"col.first_review.snippet".as("first_review"), $"col.last_review.snippet".as("last_review"), $"col.overall_rating.snippet".as("overall_rating"), $"col.price.snippet".as("price"))

impressions.select($"timestamp", $"query", $"search_id", $"paginated_id", $"position", $"doc_id", $"title", $"listing_url").orderBy($"search_id", $"paginated_id", $"position").show(380, false)